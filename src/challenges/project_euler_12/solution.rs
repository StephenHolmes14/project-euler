use std::time::Instant;

/**
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
pub fn project_euler_12() {
    let start = Instant::now();
    let mut answer = 0;

    let expected_divisors = 500;

    let mut n = 1;
    let mut triangle_number = 1;

    loop {
        n += 1;
        triangle_number += n;

        if count_factors(triangle_number) > expected_divisors {
            break
        }
    }

    answer = triangle_number;

    println!("Project Euler 12: {}, Time Taken: {}", answer, start.elapsed().as_secs());
}

fn count_factors(value: u64) -> i32 {
    let sqrt = (value as f64).sqrt() as u64;
    let mut count = 0;

    for possible_factor in 2..(sqrt+1) {
        if value % possible_factor == 0 {
            // If the number is the square root it's only counted once
            count += if possible_factor == sqrt { 1 } else { 2 };
        }
    }

    count
}

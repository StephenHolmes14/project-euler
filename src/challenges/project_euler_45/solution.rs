use std::ops::{Add, Sub};
use std::time::Instant;
use std::collections::BTreeSet;

///
/// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
//
// Triangle	 	    Tn=n(n+1)/2	 	    1, 3, 6, 10, 15, ...
// Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
// Hexagonal	 	Hn=n(2n−1)	 	    1, 6, 15, 28, 45, ...
// It can be verified that T285 = P165 = H143 = 40755.
//
// Find the next triangle number that is also pentagonal and hexagonal.
//
///

pub fn calculate() {
    let start = Instant::now();
    let mut answer = 0;

    answer = find_answer();

    println!("Project Euler 45: {}, Time Taken: {}ms", answer, start.elapsed().as_millis());
}

pub fn find_answer() -> u64 {
    let mut pentagonals: BTreeSet<u64> = BTreeSet::new();
    let mut hexagonals: BTreeSet<u64> = BTreeSet::new();

    let mut n = 2;

    loop {
        let tri = triagonal(n);
        let pen = pentagonal(n);
        pentagonals.insert(pen);
        let hex = hexagonal(n);
        hexagonals.insert(hex);

        if pentagonals.contains(&tri)
            && hexagonals.contains(&tri)
            && n != 285 {

            return tri;
        }

        n += 1;
    }
}

fn triagonal(n: u64) -> u64 {
    n*(n+1)/2
}

fn pentagonal(n: u64) -> u64 {
    n*(3*n - 1)/2
}

fn hexagonal(n: u64) -> u64 {
    n*(2*n-1)
}
use std::ops::{Add, Sub};
use std::time::Instant;
use std::fs;
use std::collections::BTreeSet;

///
/// Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
//
// Triangle	 	    Tn=n(n+1)/2	 	    1, 3, 6, 10, 15, ...
// Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
// Hexagonal	 	Hn=n(2n−1)	 	    1, 6, 15, 28, 45, ...
// It can be verified that T285 = P165 = H143 = 40755.
//
// Find the next triangle number that is also pentagonal and hexagonal.
//
///

pub fn calculate() {
    let start = Instant::now();
    let mut answer = 0;

    answer = find_answer();

    println!("Project Euler 43: {}, Time Taken: {}", answer, start.elapsed().as_millis());
}

pub fn find_answer() -> i32 {

    let mut n = 4;
    let mut previous = BTreeSet::from([1, 5, 12]);

    loop {
        let new_value = pentagonal(n);

        for larger in previous.iter() {
            let smaller = new_value - larger;

            // If the smaller number isn't in the sequence continue
            if !previous.contains(&smaller) {
                continue;
            }

            let difference = larger - smaller;

            // If the difference is in the sequence
            // Then it must be the smallest possible value
            if previous.contains(&difference) {
                return difference;
            }
        }


        previous.insert(new_value);
        n += 1;
    }
}

fn pentagonal(n: i32) -> i32 {
    n*(3*n - 1)/2
}